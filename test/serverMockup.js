// Generated by CoffeeScript 1.7.1
(function() {
  var Buffer, dgram, discover, fs, http, listener, reBody, reCommand;

  http = require('http');

  dgram = require('dgram');

  fs = require('fs');

  Buffer = (require('buffer')).Buffer;

  reBody = /<s:Body xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance" xmlns:xsd="http:\/\/www.w3.org\/2001\/XMLSchema">(.*)<\/s:Body>/;

  reCommand = /<(\S*) /;

  listener = function(req, res) {
    var buf;
    req.setEncoding('utf8');
    buf = [];
    req.on('data', function(chunk) {
      return buf.push(chunk);
    });
    return req.on('end', function() {
      var body, command, request;
      request = Buffer.concat(buf);
      body = reBody.exec(request);
      if (!body) {
        return res.end();
      }
      body = body[1];
      command = reCommand.exec(body)[1];
      if (!command) {
        return res.end();
      }
      if (!fs.existsSync(__dirname + '/serverMockup/' + command + '.xml')) {
        command = 'Error';
      }
      return fs.createReadStream(__dirname + '/serverMockup/' + command + '.xml').pipe(res);
    });
  };

  discover = dgram.createSocket('udp4');

  discover.msg = new Buffer(fs.readFileSync(__dirname + '/serverMockup/Probe.xml').toString().replace('SERVICE_URI', 'http://localhost:' + (process.env.PORT || 10101) + '/onvif/device_service'));

  discover.on('error', function(err) {
    throw err;
  });

  discover.on('message', function(msg, rinfo) {
    return discover.send(discover.msg, 0, discover.msg.length, rinfo.port, rinfo.address);
  });

  discover.bind(3702, function() {
    return discover.addMembership('239.255.255.250');
  });

  module.exports = http.createServer(listener).listen(process.env.PORT || 10101);

}).call(this);

//# sourceMappingURL=serverMockup.map
