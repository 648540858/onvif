// Generated by CoffeeScript 1.7.1
(function() {
  var Cam, assert, serverMockup;

  assert = require('assert');

  Cam = require('../lib/onvif').Cam;

  serverMockup = require('./serverMockup');

  describe('Simple and common get functions', function() {
    var cam;
    cam = null;
    before(function(done) {
      return cam = new Cam({
        hostname: 'localhost',
        username: 'admin',
        password: '9999',
        port: 10101
      }, done);
    });
    describe('getCapabilities', function() {
      it('should return an capabilities object with correspondent properties and also set them into capability property', function(done) {
        return cam.getCapabilities(function(err, data) {
          assert.equal(err, null);
          assert.ok(['device', 'events', 'imaging', 'media', 'PTZ', 'extension'].every(function(prop) {
            return data[prop];
          }));
          assert.equal(cam.capabilities, data);
          return done();
        });
      });
      return it('should store PTZ link in ptzUri property', function(done) {
        assert.equal(cam.ptzUri.href, cam.capabilities.PTZ.XAddr);
        return done();
      });
    });
    describe('getVideoSources', function() {
      return it('should return a videosources object with correspondent properties and also set them into videoSources property', function(done) {
        return cam.getVideoSources(function(err, data) {
          assert.equal(err, null);
          assert.ok(['$', 'framerate', 'resolution'].every(function(prop) {
            return data[prop];
          }));
          assert.equal(cam.videoSources, data);
          return done();
        });
      });
    });
    describe('getSystemDateAndTime', function() {
      return it('should return valid date', function(done) {
        return cam.getSystemDateAndTime(function(err, data) {
          assert.equal(err, null);
          assert.ok(data instanceof Date);
          return done();
        });
      });
    });
    return describe('getServices', function() {
      return it('should return an array of services objects', function(done) {
        return cam.getServices(function(err, data) {
          assert.equal(err, null);
          assert.ok(Array.isArray(data));
          assert.ok(data.every(function(service) {
            return service.namespace && service.XAddr && service.version;
          }));
          return done();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=simple.map
